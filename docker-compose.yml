services:
  # Base de donn√©es MySQL
  database:
    image: mysql:8.0
    container_name: zenticket_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${DATABASE_NAME:-zenticket}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-symfony}
      MYSQL_USER: ${DATABASE_USER:-symfony}
    ports:
      - "3308:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/zenticket_backup.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - zenticket_network

  # Serveur PHP-FPM
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: zenticket_php
    depends_on:
      - database
    volumes:
      - ./:/var/www/symfony
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini
    networks:
      - zenticket_network

  # Serveur Web Nginx
  nginx:
    image: nginx:alpine
    container_name: zenticket_nginx
    restart: unless-stopped
    depends_on:
      - php
    ports:
      - "8080:80"
    volumes:
      - ./:/var/www/symfony
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - zenticket_network

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: zenticket_phpmyadmin
    restart: unless-stopped
    depends_on:
      - database
    ports:
      - "8081:80"
    environment:
      PMA_HOST: database
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD:-root}
    networks:
      - zenticket_network

  # Node.js pour les assets
  node:
    image: node:18-alpine
    container_name: zenticket_node
    working_dir: /var/www/symfony
    volumes:
      - ./:/var/www/symfony
    # Installation automatique sans fichier externe
    command: >
      sh -c "
        echo 'üé® Installation des assets...' &&
        while [ ! -f package.json ]; do
          echo 'Attente des fichiers...'
          sleep 2
        done &&
        if [ ! -d node_modules ]; then
          echo 'üì¶ Installation NPM...'
          npm install
        fi &&
        echo 'üî® Compilation des assets...'
        npm run build || echo 'Pas de script build' &&
        echo '‚úÖ Node pr√™t!' &&
        tail -f /dev/null
      "
    networks:
      - zenticket_network
      
  # Serveur Mercure
  mercure:
    image: dunglas/mercure
    container_name: zenticket_mercure
    restart: unless-stopped
    environment:
      SERVER_NAME: :80
      # S'assurer que les cl√©s JWT sont identiques √† celles de .env.local
      MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      # Autoriser les origines sp√©cifiques
      CORS_ALLOW_ORIGIN: 'http://localhost:8080,http://localhost:8000'
      # Am√©lioration de la configuration SSE
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins http://localhost:8080 http://localhost:8000
        cors_allowed_headers Content-Type,Authorization
        cors_exposed_headers Link
        cors_max_age 86400
        cors_credentials true
        # D√©sactiver le heartbeat r√©duit les d√©connexions
        heartbeat 15s
        # Augmenter le timeout pour √©viter les d√©connexions
        transport_read_timeout 0
        # D√©sactiver le buffer c√¥t√© serveur
        disable_buffer true
      # Param√®tres de debug
      DEBUG: '1'
    ports:
      - "3001:80"  # Important : 80 pas 3001 √† l'int√©rieur
    networks:
      - zenticket_network

volumes:
  db_data:
  mercure_data:

networks:
  zenticket_network:
    driver: bridge
